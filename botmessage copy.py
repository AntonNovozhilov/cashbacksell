import asyncio
import jso
import os
from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
load_dotenv()  

from texts import FAQ, REQUISE  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç

BOT_TOKEN = os.getenv('BOT_TOKEN')
GROUP_ID = -1002562650840
ADMIN_ID = [6446030996, 448888074, 1111339115]
CHANNEL_ID = -1002083919862  # —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å chat_id –∫–∞–Ω–∞–ª–∞
PRICE_MESSAGE_ID = 7
THREADS_FILE = "threads.json"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

finish_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", callback_data="finish_post")]
])

class PostState(StatesGroup):
    title = State()
    place = State()
    price = State()
    cashback = State()
    photo = State()

def load_threads() -> dict[int, int]:
    if os.path.exists(THREADS_FILE):
        with open(THREADS_FILE, "r") as f:
            return {int(k): v for k, v in json.load(f).items()}
    return {}

def save_threads(data: dict[int, int]):
    with open(THREADS_FILE, "w") as f:
        json.dump(data, f)

user_threads: dict[int, int] = load_threads()

@dp.message(CommandStart())
async def hendler_start(message: Message):
    kb = [
        [KeyboardButton(text='–ü—Ä–∞–π—Å')],
        [KeyboardButton(text='–†–µ–∫–≤–∏–∑–∏—Ç—ã')],
        [KeyboardButton(text='–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å—Ç')],
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ä–∞—Ç–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@dp.message(Command('help'))
async def hendler_help(message: Message):
    text = FAQ
    await message.answer(text=text, parse_mode="HTML")


@router.message(lambda message: message.text == "–ü—Ä–∞–π—Å")
async def price(message: Message):
    await bot.forward_message(
        chat_id=message.chat.id,
        from_chat_id=CHANNEL_ID,
        message_id=PRICE_MESSAGE_ID
    )

@router.message(lambda message: message.text == "–†–µ–∫–≤–∏–∑–∏—Ç—ã")
async def banklist(message: Message):
    await message.answer(REQUISE)

@router.message(lambda message: message.text == "–°–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å—Ç")
async def create_post(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(PostState.title)

@router.message(PostState.title)
async def post_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–ù–∞ –∫–∞–∫–æ–º –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –≤—ã –ø—Ä–æ–¥–∞–µ—Ç–µ")
    await state.set_state(PostState.place)

@router.message(PostState.place)
async def post_place(message: Message, state: FSMContext):
    await state.update_data(place=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –≤ —Ä—É–±–ª—è—Ö:")
    await state.set_state(PostState.price)

@router.message(PostState.price)
async def post_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1490):")
        return
    await state.update_data(price=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–µ—à–±—ç–∫–∞ –≤ —Ä—É–±–ª—è—Ö:")
    await state.set_state(PostState.cashback)

@router.message(PostState.cashback)
async def post_cashback(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–µ—à–±—ç–∫ —á–∏—Å–ª–æ–º –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 300):")
        return
    await state.update_data(cashback=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ –ø–æ—Å—Ç—É:")
    await state.set_state(PostState.photo)

@router.message(PostState.photo, ~F.photo)
async def wrong_input_in_photo(message: Message):
    await message.answer("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ *—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é* —Ç–æ–≤–∞—Ä–∞.\n"
                         "–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É—è üìé –∏ –≤—ã–±—Ä–∞–≤ *–§–æ—Ç–æ*.\n")


@router.message(PostState.photo, F.photo)
async def post_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    photos.append(message.photo[-1].file_id)
    await state.update_data(photos=photos)
    if len(photos) == 1:
        await message.answer(
            "üñº –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –î–∞–ª–µ–µ: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            reply_markup=finish_kb
        )

@router.callback_query(F.data == "finish_post")
async def handle_finish(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # —Å–∫—Ä—ã—Ç—å "–∑–∞–≥—Ä—É–∑–∫–∞..." —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    data = await state.get_data()
    photos = data.get("photos", [])

    if not photos:
        await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
        return

    price = int(data["price"])
    cashback = int(data["cashback"])
    new_price = price - cashback
    username = callback.from_user.username or callback.from_user.first_name

    text = (
        f"<b>{data['title']}</b> \n"
        f"<b>{data['place']}</b> \n\n"
        f"<b>–¶–µ–Ω–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ:</b> {data['price']}‚ÇΩ ‚ùå \n"
        f"<b>–¶–µ–Ω–∞ –¥–ª—è –≤–∞—Å:</b> {new_price}‚ÇΩ ‚úÖ \n"
        f"<b>–ö–µ—à–±—ç–∫:</b> {data['cashback']}‚ÇΩ üî• \n\n"
        f"üñäÔ∏è <b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤—ã–∫—É–ø—É –ø–∏—à–∏</b> @{username}"
    )

    user_id = callback.from_user.id
    if user_id not in user_threads:
        topic_title = f"{username} {user_id}"
        new_topic = await bot.create_forum_topic(chat_id=GROUP_ID, name=topic_title)
        thread_id = new_topic.message_thread_id
        user_threads[user_id] = thread_id
        save_threads(user_threads)
        await bot.send_message(chat_id=GROUP_ID, text=f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (id: {user_id})", message_thread_id=thread_id)

    thread_id = user_threads[user_id]
    media_group = [InputMediaPhoto(media=file_id) for file_id in photos]
    await bot.send_media_group(chat_id=GROUP_ID, media=media_group, message_thread_id=thread_id)

    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç", callback_data=f"approve_{user_id}")],
        [InlineKeyboardButton(text="‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω", callback_data=f"reject_{user_id}")]
    ])
    await bot.send_message(chat_id=GROUP_ID, text=text, message_thread_id=thread_id, reply_markup=buttons)
    await state.clear()
    await callback.message.answer("–ì–æ—Ç–æ–≤–æ! –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")


@router.callback_query(F.data.startswith("approve_"))
async def approve_post(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_ID:
        return
    user_id = int(callback.data.split("_")[1])
    try:
        await bot.send_message(chat_id=user_id, text="‚úÖ –í–∞—à –ø–æ—Å—Ç –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è. –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å.")
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

@router.callback_query(F.data.startswith("reject_"))
async def reject_post(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_ID:
        return
    user_id = int(callback.data.split("_")[1])
    try:
        await bot.send_message(chat_id=user_id, text="‚ùå –í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

@router.message(F.chat.type == "private")
async def handle_user_message(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        return
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    if user_id not in user_threads:
        topic_title = f"{username} {user_id}"
        new_topic = await bot.create_forum_topic(chat_id=GROUP_ID, name=topic_title)
        thread_id = new_topic.message_thread_id
        user_threads[user_id] = thread_id
        save_threads(user_threads)
        await bot.send_message(chat_id=GROUP_ID, text=f"–ê–¥–º–∏–Ω, –ø–æ–¥–∫–ª—é—á–∏—Å—å –∫ –¥–∏–∞–ª–æ–≥—É —Å @{username} (id: {user_id})", message_thread_id=thread_id)
    await bot.forward_message(chat_id=GROUP_ID, from_chat_id=message.chat.id, message_id=message.message_id, message_thread_id=user_threads[user_id])

@router.message(F.chat.id == GROUP_ID, F.is_topic_message, Command("–ø"))
async def handle_price_command(message: Message):
    if message.from_user.id not in ADMIN_ID:
        return
    thread_id = message.message_thread_id
    for uid, tid in user_threads.items():
        if tid == thread_id:
            try:
                await bot.forward_message(
        chat_id=uid,
        from_chat_id=CHANNEL_ID,
        message_id=PRICE_MESSAGE_ID
    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∞–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
            break

@router.message(F.chat.id == GROUP_ID, F.is_topic_message, Command("—Ä"))
async def handle_requis_command(message: Message):
    if message.from_user.id not in ADMIN_ID:
        return
    thread_id = message.message_thread_id
    for uid, tid in user_threads.items():
        if tid == thread_id:
            try:
                await bot.send_message(chat_id=uid, text=REQUISE)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
            break

@router.message(F.chat.id == GROUP_ID, F.is_topic_message)
async def handle_group_reply(message: Message):
    thread_id = message.message_thread_id
    for uid, tid in user_threads.items():
        if tid == thread_id:
            try:
                if message.text:
                    await bot.send_message(chat_id=uid, text=message.text)
                elif message.photo:
                    await bot.send_photo(chat_id=uid, photo=message.photo[-1].file_id, caption=message.caption or "")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
            break

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
